diff --git a/src/DInput.c b/src/DInput.c
index 56e4f9b..c230e6a 100644
--- a/src/DInput.c
+++ b/src/DInput.c
@@ -24,6 +24,35 @@
 
 #include "DInput.h"
 
+void Release_wrap(void *);
+void CreateDevice_wrap(void *);
+void EnumDevices_wrap(void *);
+void QueryInterface_wrap(void *);
+
+void GetCapabilities_wrap(void *);
+void SetProperty_wrap(void *);
+void Acquire_wrap(void *);
+void Unacquire_wrap(void *);
+void GetDeviceState_wrap(void *);
+void GetDeviceData_wrap(void *);
+void SetDataFormat_wrap(void *);
+void SetEventNotification_wrap(void *);
+void SetCooperativeLevel_wrap(void *);
+void GetObjectInfo_wrap(void *);
+void CreateEffect_wrap(void *);
+void SendForceFeedbackCommand_wrap(void *);
+void Poll_wrap(void *);
+
+void SetParameters_wrap(void *);
+void Start_wrap(void *);
+void Stop_wrap(void *);
+void Download_wrap(void *);
+void Unload_wrap(void *);
+
+int32_t wrap_stdcall2_ret(void *this, void *func, int32_t arg0, int32_t arg1);
+
+static void *dinput_game_thread;
+
 #include <SDL2/SDL_events.h>
 
 #define MOUSE        0x6F1D2B60
@@ -42,7 +71,7 @@ extern int32_t joystick0EscButton;
 extern BOOL useSpringForceFeedbackEffect;
 extern uint32_t windowsForceFeedbackDevice;
 
-extern uint32_t mousePositionX, mousePositionY;
+extern uint32_t *mousePositionX, *mousePositionY;
 
 extern int32_t touchpadJoyIdx;
 
@@ -145,7 +174,7 @@ static void setEffect(DirectInputEffect *dinputEffect, const DIEFFECT *di_eff)
 	}
 }
 
-static REALIGN STDCALL uint32_t QueryInterface(void **this, const IID *const riid, void **object)
+REALIGN STDCALL uint32_t QueryInterface(void **this, const IID *const riid, void **object)
 {
 	/* Joystick only */
 	++((DirectInputObject *)(*this - sizeof(DirectInputObject)))->ref;
@@ -153,7 +182,7 @@ static REALIGN STDCALL uint32_t QueryInterface(void **this, const IID *const rii
 // 	printf("QueryInterface: 0x%X %p\n", (*riid)[0], *this);
 	return 0;
 }
-static REALIGN STDCALL uint32_t Release(void **this)
+REALIGN STDCALL uint32_t Release(void **this)
 {
 	DirectInputObject *dinputObj = (DirectInputObject *)(*this - sizeof(DirectInputObject));
 	if (!--dinputObj->ref)
@@ -179,7 +208,7 @@ static REALIGN STDCALL uint32_t Release(void **this)
 	return 0;
 }
 
-static REALIGN STDCALL uint32_t SetParameters(DirectInputEffect **this, const DIEFFECT *eff, uint32_t flags)
+REALIGN STDCALL uint32_t SetParameters(DirectInputEffect **this, const DIEFFECT *eff, uint32_t flags)
 {
 // 	printf("SetParameters: %X %X\n", flags, (*this)->real_type);
 	if ((*this)->haptic)
@@ -193,32 +222,32 @@ static REALIGN STDCALL uint32_t SetParameters(DirectInputEffect **this, const DI
 	}
 	return 0;
 }
-static REALIGN STDCALL uint32_t Start(DirectInputEffect **this, uint32_t iterations, uint32_t flags)
+REALIGN STDCALL uint32_t Start(DirectInputEffect **this, uint32_t iterations, uint32_t flags)
 {
 // 	printf("Start: %X\n", (*this)->real_type);
 	if ((*this)->real_type == SDL_HAPTIC_SINE)
 		SDL_HapticRunEffect((*this)->haptic, (*this)->effect_idx, iterations);
 	return 0;
 }
-static REALIGN STDCALL uint32_t Stop(DirectInputEffect **this)
+REALIGN STDCALL uint32_t Stop(DirectInputEffect **this)
 {
 // 	printf("Stop: %X\n", (*this)->real_type);
 	SDL_HapticStopEffect((*this)->haptic, (*this)->effect_idx);
 	return 0;
 }
-static REALIGN STDCALL uint32_t Download(DirectInputEffect **this)
+REALIGN STDCALL uint32_t Download(DirectInputEffect **this)
 {
 // 	printf("Download: %X\n", (*this)->real_type);
 	return 0;
 }
-static REALIGN STDCALL uint32_t Unload(DirectInputEffect **this)
+REALIGN STDCALL uint32_t Unload(DirectInputEffect **this)
 {
 // 	printf("Unload: %X\n", (*this)->real_type);
 	SDL_HapticStopEffect((*this)->haptic, (*this)->effect_idx);
 	return 0;
 }
 
-static REALIGN STDCALL uint32_t GetCapabilities(DirectInputDevice **this, DIDEVCAPS *devCaps)
+REALIGN STDCALL uint32_t GetCapabilities(DirectInputDevice **this, DIDEVCAPS *devCaps)
 {
 	/* Joystick only */
 	if ((*this)->guid.a == JOYSTICK)
@@ -232,23 +261,23 @@ static REALIGN STDCALL uint32_t GetCapabilities(DirectInputDevice **this, DIDEVC
 	}
 	return 0;
 }
-static REALIGN STDCALL uint32_t SetProperty(DirectInputDevice **this, const GUID *const rguidProp, const DIPROPHEADER *pdiph)
+REALIGN STDCALL uint32_t SetProperty(DirectInputDevice **this, const GUID *const rguidProp, const DIPROPHEADER *pdiph)
 {
 	if ((uint32_t)rguidProp == 7 /*DIPROP_FFGAIN*/)
 		SDL_HapticSetGain((*this)->haptic, ((const DIPROPDWORD *)pdiph)->dwData / 100);
 	return 0;
 }
-static REALIGN STDCALL uint32_t Acquire(DirectInputDevice **this)
+REALIGN STDCALL uint32_t Acquire(DirectInputDevice **this)
 {
 // 	printf("Acquire: %p %X\n", *this);
 	return 0;
 }
-static REALIGN STDCALL uint32_t Unacquire(DirectInputDevice **this)
+REALIGN STDCALL uint32_t Unacquire(DirectInputDevice **this)
 {
 // 	printf("Unacquire: %u\n", (*this)->ref);
 	return 0;
 }
-static REALIGN STDCALL uint32_t GetDeviceState(DirectInputDevice **this, uint32_t cbData, void *data)
+REALIGN STDCALL uint32_t GetDeviceState(DirectInputDevice **this, uint32_t cbData, void *data)
 {
 	/* Joystick only */
 	if (data && cbData == sizeof(DIJOYSTATE) && (*this)->guid.a == JOYSTICK)
@@ -364,7 +393,7 @@ static REALIGN STDCALL uint32_t GetDeviceState(DirectInputDevice **this, uint32_
 	}
 	return 0;
 }
-static REALIGN STDCALL uint32_t GetDeviceData(DirectInputDevice **this, uint32_t cbObjectData, DIDEVICEOBJECTDATA *rgdod, uint32_t *pdwInOut, uint32_t dwFlags)
+REALIGN STDCALL uint32_t GetDeviceData(DirectInputDevice **this, uint32_t cbObjectData, DIDEVICEOBJECTDATA *rgdod, uint32_t *pdwInOut, uint32_t dwFlags)
 {
 	/* Mouse only. This implementation forces the absolute position of the mouse cursor. */
 	if (rgdod && pdwInOut && (*this)->guid.a == MOUSE && *pdwInOut >= 3)
@@ -377,12 +406,12 @@ static REALIGN STDCALL uint32_t GetDeviceData(DirectInputDevice **this, uint32_t
 		rgdod[2].dwOfs = 12; //Mouse Click
 		for (i = 3; i < *pdwInOut; ++i)
 			rgdod[i].dwOfs = 8; //Nothing
-		if (mousePositionX != lastX || mousePositionY != lastY)
+		if (*mousePositionX != lastX || *mousePositionY != lastY)
 		{
 			/* Move the mouse cursor if game changes cursor position */
-			SDL_WarpMouseInWindow(NULL, (mousePositionX * winWidth / 640.0f) + 0.5f, (mousePositionY * winHeight / 480.0f) + 0.5f);
-			lastX = mousePositionX;
-			lastY = mousePositionY;
+			SDL_WarpMouseInWindow(NULL, (*mousePositionX * winWidth / 640.0f) + 0.5f, (*mousePositionY * winHeight / 480.0f) + 0.5f);
+			lastX = *mousePositionX;
+			lastY = *mousePositionY;
 		}
 		else
 		{
@@ -396,8 +425,8 @@ static REALIGN STDCALL uint32_t GetDeviceData(DirectInputDevice **this, uint32_t
 				lastX = (x * 640.0f / winWidth)  + 0.5f;
 				lastY = (y * 480.0f / winHeight) + 0.5f;
 				/* Set as absolute position */
-				rgdod[0].dwData = lastX - mousePositionX;
-				rgdod[1].dwData = lastY - mousePositionY;
+				rgdod[0].dwData = lastX - *mousePositionX;
+				rgdod[1].dwData = lastY - *mousePositionY;
 			}
 			if (!lastMouseButton)
 				rgdod[2].dwData = -mouseButton;
@@ -406,7 +435,7 @@ static REALIGN STDCALL uint32_t GetDeviceData(DirectInputDevice **this, uint32_t
 	}
 	return 0;
 }
-static REALIGN STDCALL uint32_t SetDataFormat(DirectInputDevice **this, const DIDATAFORMAT *df)
+REALIGN STDCALL uint32_t SetDataFormat(DirectInputDevice **this, const DIDATAFORMAT *df)
 {
 	/* NFSIISE uses standard data format:
 	 * 	Mouse    - c_dfDIMouse
@@ -414,17 +443,17 @@ static REALIGN STDCALL uint32_t SetDataFormat(DirectInputDevice **this, const DI
 	*/
 	return 0;
 }
-static REALIGN STDCALL uint32_t SetEventNotification(DirectInputDevice **this, void *hEvent)
+REALIGN STDCALL uint32_t SetEventNotification(DirectInputDevice **this, void *hEvent)
 {
 // 	printf("SetEventNotification: %p 0x%p\n", *this, hEvent);
 	return 0;
 }
-static REALIGN STDCALL uint32_t SetCooperativeLevel(DirectInputDevice **this, void *hwnd, uint32_t dwFlags)
+REALIGN STDCALL uint32_t SetCooperativeLevel(DirectInputDevice **this, void *hwnd, uint32_t dwFlags)
 {
 // 	printf("SetCooperativeLevel: %p %p 0x%X\n", *this, hwnd, dwFlags);
 	return 0;
 }
-static REALIGN STDCALL uint32_t CreateEffect(DirectInputDevice **this, const GUID *const rguid, const DIEFFECT *eff, DirectInputEffect ***deff, void *punkOuter)
+REALIGN STDCALL uint32_t CreateEffect(DirectInputDevice **this, const GUID *const rguid, const DIEFFECT *eff, DirectInputEffect ***deff, void *punkOuter)
 {
 	/* Joystick only */
 	DirectInputEffect *dinputEff = (DirectInputEffect *)calloc(1, sizeof(DirectInputObject) + sizeof(DirectInputEffect));
@@ -432,11 +461,11 @@ static REALIGN STDCALL uint32_t CreateEffect(DirectInputDevice **this, const GUI
 	dinputEff = (void *)dinputEff + sizeof(DirectInputObject);
 	dinputEff->xAxis = &(*this)->xAxis;
 
-	dinputEff->SetParameters = SetParameters;
-	dinputEff->Start = Start;
-	dinputEff->Stop = Stop;
-	dinputEff->Download = Download;
-	dinputEff->Unload = Unload;
+	dinputEff->SetParameters = SetParameters_wrap;
+	dinputEff->Start = Start_wrap;
+	dinputEff->Stop = Stop_wrap;
+	dinputEff->Download = Download_wrap;
+	dinputEff->Unload = Unload_wrap;
 
 	memcpy(&dinputEff->guid, rguid, sizeof(GUID));
 
@@ -476,14 +505,14 @@ static REALIGN STDCALL uint32_t CreateEffect(DirectInputDevice **this, const GUI
 
 	return 0;
 }
-static REALIGN STDCALL uint32_t GetObjectInfo(DirectInputDevice **this, DIDEVICEOBJECTINSTANCEA *pdidoi, uint32_t dwObj, uint32_t dwHow)
+REALIGN STDCALL uint32_t GetObjectInfo(DirectInputDevice **this, DIDEVICEOBJECTINSTANCEA *pdidoi, uint32_t dwObj, uint32_t dwHow)
 {
 	/* Joystick only */
 	memset(pdidoi, 0, sizeof(DIDEVICEOBJECTINSTANCEA));
 // 	printf("GetObjectInfo: %p %d %d\n", *this, dwObj, dwHow);
 	return 0;
 }
-static REALIGN STDCALL uint32_t SendForceFeedbackCommand(DirectInputDevice **this, uint32_t flags)
+REALIGN STDCALL uint32_t SendForceFeedbackCommand(DirectInputDevice **this, uint32_t flags)
 {
 	/* Joystick only */
 // 	printf("SendForceFeedbackCommand: %X\n", flags);
@@ -503,36 +532,36 @@ static REALIGN STDCALL uint32_t SendForceFeedbackCommand(DirectInputDevice **thi
 	}
 	return 0;
 }
-static REALIGN STDCALL uint32_t Poll(DirectInputDevice **this)
+REALIGN STDCALL uint32_t Poll(DirectInputDevice **this)
 {
 	/* Joystick only */
 	SDL_JoystickUpdate();
 	return 0;
 }
 
-static REALIGN STDCALL uint32_t CreateDevice(void **this, const GUID *const rguid, DirectInputDevice ***directInputDevice, void *unkOuter)
+REALIGN STDCALL uint32_t CreateDevice(void **this, const GUID *const rguid, DirectInputDevice ***directInputDevice, void *unkOuter)
 {
 	DirectInputDevice *dinputDev = (DirectInputDevice *)calloc(1, sizeof(DirectInputObject) + sizeof(DirectInputDevice));
 	((DirectInputObject *)dinputDev)->ref = 1;
 	((DirectInputObject *)dinputDev)->is_device = 1;
 	dinputDev = (void *)dinputDev + sizeof(DirectInputObject);
 
-	dinputDev->QueryInterface = QueryInterface;
-	dinputDev->Release = Release;
-
-	dinputDev->GetCapabilities = GetCapabilities;
-	dinputDev->SetProperty = SetProperty;
-	dinputDev->Acquire = Acquire;
-	dinputDev->Unacquire = Unacquire;
-	dinputDev->GetDeviceState = GetDeviceState;
-	dinputDev->GetDeviceData = GetDeviceData;
-	dinputDev->SetDataFormat = SetDataFormat;
-	dinputDev->SetEventNotification = SetEventNotification;
-	dinputDev->SetCooperativeLevel = SetCooperativeLevel;
-	dinputDev->GetObjectInfo = GetObjectInfo;
-	dinputDev->CreateEffect = CreateEffect;
-	dinputDev->SendForceFeedbackCommand = SendForceFeedbackCommand;
-	dinputDev->Poll = Poll;
+	dinputDev->QueryInterface = QueryInterface_wrap;
+	dinputDev->Release = Release_wrap;
+
+	dinputDev->GetCapabilities = GetCapabilities_wrap;
+	dinputDev->SetProperty = SetProperty_wrap;
+	dinputDev->Acquire = Acquire_wrap;
+	dinputDev->Unacquire = Unacquire_wrap;
+	dinputDev->GetDeviceState = GetDeviceState_wrap;
+	dinputDev->GetDeviceData = GetDeviceData_wrap;
+	dinputDev->SetDataFormat = SetDataFormat_wrap;
+	dinputDev->SetEventNotification = SetEventNotification_wrap;
+	dinputDev->SetCooperativeLevel = SetCooperativeLevel_wrap;
+	dinputDev->GetObjectInfo = GetObjectInfo_wrap;
+	dinputDev->CreateEffect = CreateEffect_wrap;
+	dinputDev->SendForceFeedbackCommand = SendForceFeedbackCommand_wrap;
+	dinputDev->Poll = Poll_wrap;
 
 	memcpy(&dinputDev->guid, rguid, sizeof(GUID));
 
@@ -562,7 +591,7 @@ static REALIGN STDCALL uint32_t CreateDevice(void **this, const GUID *const rgui
 	free((void *)dinputDev - sizeof(DirectInputObject));
 	return -1;
 }
-static REALIGN STDCALL uint32_t EnumDevices(void **this, uint32_t devType, DIENUMDEVICESCALLBACKA callback, void *ref, uint32_t dwFlags)
+REALIGN STDCALL uint32_t EnumDevices(void **this, uint32_t devType, DIENUMDEVICESCALLBACKA callback, void *ref, uint32_t dwFlags)
 {
 	if (devType == 4 /* DIDEVTYPE_JOYSTICK */)
 	{
@@ -575,25 +604,28 @@ static REALIGN STDCALL uint32_t EnumDevices(void **this, uint32_t devType, DIENU
 				continue;
 			deviceInstance.guidInstance.a = JOYSTICK;
 			deviceInstance.guidInstance.b = i;
-			if (!callback(&deviceInstance, ref))
+
+			if (!wrap_stdcall2_ret(dinput_game_thread, callback, &deviceInstance, ref))
 				break;
 		}
 	}
 	return 0;
 }
 
-REALIGN STDCALL uint32_t DirectInputCreateA_wrap(void *hInstance, uint32_t version, DirectInput ***directInputA, void *unkOuter)
+REALIGN STDCALL uint32_t DirectInputCreateA_wrap(void *ctx, void *hInstance, uint32_t version, DirectInput ***directInputA, void *unkOuter)
 {
 	DirectInput *dinput = (DirectInput *)calloc(1, sizeof(DirectInputObject) + sizeof(DirectInput));
 	((DirectInputObject *)dinput)->ref = 1;
 	dinput = (void *)dinput + sizeof(DirectInputObject);
 
-	dinput->Release = Release;
-	dinput->CreateDevice = CreateDevice;
-	dinput->EnumDevices = EnumDevices;
+	dinput->Release = Release_wrap;
+	dinput->CreateDevice = CreateDevice_wrap;
+	dinput->EnumDevices = EnumDevices_wrap;
 
 	*directInputA = malloc(sizeof(void *));
 	**directInputA = dinput;
 
+	dinput_game_thread = ctx;
+
 	return 0;
 }
diff --git a/src/EAcsnd.c b/src/EAcsnd.c
index 4f80d78..b5c788c 100644
--- a/src/EAcsnd.c
+++ b/src/EAcsnd.c
@@ -26,8 +26,11 @@
 
 extern BOOL linearSoundInterpolation;
 
+void wrap_regparm2(void *this, void *func, int32_t arg0, int32_t arg1);
+extern void *audio_game_thread;
+
 static void (REGPARM *getSamples)(void *samples, uint32_t num_samples_per_chn);
-static void (*fadeInOut)(void);
+static void (*fadeInOut)(void *);
 
 #include <SDL2/SDL_audio.h>
 
@@ -44,13 +47,13 @@ static void audioCallback(void *userdata, uint8_t *stream, int32_t len)
 	{
 		int32_t i;
 		for (i = 0; i < len; i += 256 * CHN_CNT * sizeof(int16_t))
-			getSamples(stream + i, 256);
+			wrap_regparm2(audio_game_thread, getSamples, stream + i, 256);
 	}
 	else
 	{
 		while (buffer_pos < len)
 		{
-			getSamples(buffer + buffer_pos, 256);
+			wrap_regparm2(audio_game_thread, getSamples, buffer + buffer_pos, 256);
 			buffer_pos += 256 * CHN_CNT * sizeof(int16_t);
 		}
 		memcpy(stream, buffer, len);
@@ -65,7 +68,7 @@ static void audioCallbackInterp(void *userdata, uint8_t *stream, int32_t len)
 	while (buffer_pos < len)
 	{
 		buffer_16b = (int16_t *)(buffer + buffer_pos);
-		getSamples(samples, 256);
+		wrap_regparm2(audio_game_thread, getSamples, samples, 256);
 		for (i = 0; i < (256 - 1) * CHN_CNT; i += CHN_CNT)
 		{
 			for (c = 0; c < CHN_CNT; ++c)
@@ -131,7 +134,7 @@ REALIGN REGPARM uint32_t iSNDdirectstart_(uint32_t arg1, void *hWnd)
 	canGetSamples = true;
 	return 0;
 }
-REALIGN void iSNDdirectserve_(void)
+REALIGN void iSNDdirectserve_(void *this)
 {
 	if (canGetSamples)
 	{
@@ -140,9 +143,9 @@ REALIGN void iSNDdirectserve_(void)
 			SDL_PauseAudioDevice(audioDevice, 0);
 			unPaused = true;
 		}
-		fadeInOut();
+		fadeInOut(this);
 		if (!audioDevice)
-			getSamples(buffer, 256);
+			wrap_regparm2(this, getSamples, buffer, 256);
 	}
 }
 REALIGN uint32_t iSNDdirectstop_(void)
diff --git a/src/FetchTrackRecords.c b/src/FetchTrackRecords.c
index f14a0a4..420f06d 100644
--- a/src/FetchTrackRecords.c
+++ b/src/FetchTrackRecords.c
@@ -26,7 +26,7 @@
 
 #include <string.h>
 
-REGPARM void sub_41B250(uint32_t arg1, void *arg2);
+void sub_41B250(void *this, uint32_t arg1, void *arg2);
 
 typedef struct
 {
@@ -59,7 +59,7 @@ static void readEntry(FILE *f, StfEntry *stfEntry)
 	fscanf(f, "%hi\n%d\n%d\n", &stfEntry->car, &stfEntry->time, &stfEntry->mode);
 }
 
-REALIGN REGPARM void fetchTrackRecords(uint32_t trackNo, BOOL clear)
+REALIGN REGPARM void fetchTrackRecords(void *this, uint32_t trackNo, BOOL clear)
 {
 	char buffer[MAX_PATH];
 	Stf stf;
@@ -70,7 +70,7 @@ REALIGN REGPARM void fetchTrackRecords(uint32_t trackNo, BOOL clear)
 	if (!clear)
 	{
 		//Get the track records relative file path, +20 means that we want a text file (ssf), not a binary file (stf)
-		sub_41B250(trackNo + 20, buffer);
+		sub_41B250(this, trackNo + 20, buffer);
 		if ((f = fopen_wrap(buffer, "r")))
 		{
 			//Skip unneeded data
@@ -92,7 +92,7 @@ REALIGN REGPARM void fetchTrackRecords(uint32_t trackNo, BOOL clear)
 	}
 
 	//Get the track records relative file path, get a binary file (stf)
-	sub_41B250(trackNo, buffer);
+	sub_41B250(this, trackNo, buffer);
 	if ((f = fopen_wrap(buffer, "wb")))
 	{
 		fwrite(&stf, 1, sizeof stf, f);
diff --git a/src/Kernel32.c b/src/Kernel32.c
index 3a6e9cf..c0d7b78 100644
--- a/src/Kernel32.c
+++ b/src/Kernel32.c
@@ -238,7 +238,7 @@ static int threadFunction(void *data)
 	Thread *thread = (Thread *)data;
 	SDL_SemWait(thread->sem);
 	SDL_DestroySemaphore(thread->sem);
-	thread->threadParameter(); //In this game thread parameter is a function address
+	thread->function(thread->arg);
 	return 0;
 }
 
@@ -248,7 +248,8 @@ REALIGN STDCALL void *CreateThread_wrap(void *threadAttributes, uint32_t stackSi
 {
 	Thread *thread = (Thread *)malloc(sizeof(Thread));
 	thread->handleType = HandleThread;
-	thread->threadParameter = parameter;
+	thread->function = startAddress;
+	thread->arg = parameter;
 	thread->sem = SDL_CreateSemaphore(!(creationFlags & 0x4 /* Start paused thread */));
 	SDL_Thread *sdl_thread = SDL_CreateThread(threadFunction, NULL, thread);
 	if (threadId)
diff --git a/src/Kernel32.h b/src/Kernel32.h
index e4a7223..de7810f 100644
--- a/src/Kernel32.h
+++ b/src/Kernel32.h
@@ -131,7 +131,8 @@
 	typedef struct
 	{
 		HandleType handleType;
-		int (*threadParameter)();
+		int (*function)(void *);
+		void *arg;
 		SDL_sem *sem;
 	} Thread;
 	typedef struct
diff --git a/src/Timer.c b/src/Timer.c
index dd64680..a1f6e8d 100644
--- a/src/Timer.c
+++ b/src/Timer.c
@@ -30,20 +30,20 @@ static SDL_TimerID timerID;
 
 typedef void Event;
 STDCALL BOOL SetEvent_wrap(Event *event);
-extern Event *dword_4DDA70, *dword_5637CC, *dword_5637D8;
-extern uint32_t dword_4DB1B0, dword_5637A0;
+extern Event **dword_4DDA70, **dword_5637CC, **dword_5637D8;
+extern uint32_t *dword_4DB1B0, *dword_5637A0;
 
 static uint32_t timerCallback(uint32_t interval, void *param)
 {
 	static uint32_t dword_5637A8, dword_5637C8;
 	int32_t delay;
 
-	if (dword_5637A0 == 655360)
+	if (*dword_5637A0 == 655360)
 		delay = 1;
 	else
 	{
-		uint32_t val = (dword_5637C8 + dword_5637A0) >> 16 /*/ 61440*/;
-		dword_5637C8 = (uint16_t)(dword_5637C8 + dword_5637A0);
+		uint32_t val = (dword_5637C8 + *dword_5637A0) >> 16 /*/ 61440*/;
+		dword_5637C8 = (uint16_t)(dword_5637C8 + *dword_5637A0);
 		dword_5637A8 += val;
 
 		delay = dword_5637A8 - SDL_GetTicks() - 1;
@@ -55,12 +55,12 @@ static uint32_t timerCallback(uint32_t interval, void *param)
 		}
 	}
 
-	if (dword_5637CC)
-		SetEvent_wrap(dword_5637CC);
-	if (dword_5637D8 && !dword_4DB1B0)
-		SetEvent_wrap(dword_5637D8);
-	if (dword_4DDA70)
-		SetEvent_wrap(dword_4DDA70);
+	if (*dword_5637CC)
+		SetEvent_wrap(*dword_5637CC);
+	if (*dword_5637D8 && !*dword_4DB1B0)
+		SetEvent_wrap(*dword_5637D8);
+	if (*dword_4DDA70)
+		SetEvent_wrap(*dword_4DDA70);
 
 	return delay;
 }
diff --git a/src/User32.c b/src/User32.c
index 85147cb..1d8cdc7 100644
--- a/src/User32.c
+++ b/src/User32.c
@@ -50,6 +50,7 @@ extern SDL_Window *sdlWin;
 BOOL windowCleared = false;
 int32_t windowResized = 0;
 
+void wrap_stdcall4(void *ctx, void *func, void *arg0, int32_t arg1, int32_t arg2, int32_t arg3);
 WindowProc wndProc;
 
 static SDL_TimerID timerID;
@@ -298,9 +299,9 @@ REALIGN STDCALL BOOL GetMessageA_wrap(MSG *msg, void *hWnd, uint32_t wMsgFilterM
 	} while (!br);
 	return -1;
 }
-REALIGN STDCALL uint32_t DispatchMessageA_wrap(const MSG *msg)
+REALIGN STDCALL uint32_t DispatchMessageA_wrap(void *ctx, const MSG *msg)
 {
-	wndProc(sdlWin, msg->uMsg, msg->wParam, msg->lParam);
+	wrap_stdcall4(ctx, wndProc, sdlWin, msg->uMsg, msg->wParam, msg->lParam);
 	return 0;
 }
 
diff --git a/src/Wrapper.c b/src/Wrapper.c
index 9b0c96e..2a8fc8e 100644
--- a/src/Wrapper.c
+++ b/src/Wrapper.c
@@ -40,7 +40,7 @@ static const char title[] = "Need For Speed II SE";
 	#define USE_X11_GAMMA
 #endif
 
-typedef void (*ProcedureType)(void);
+typedef void (*ProcedureType)(void *);
 static ProcedureType atExitProcedures[10];
 static uint32_t atExitProcedureCount;
 REALIGN STDCALL void WrapperAtExit(ProcedureType proc)
@@ -122,10 +122,11 @@ void exit_func(void)
 {
 	SDL_TimerID timerID;
 	uint32_t i;
+	extern void *main_game_thread;
 	for (i = 0; i < atExitProcedureCount; ++i)
 	{
 		timerID = SDL_AddTimer(2500, watchdogTimer, NULL);
-		atExitProcedures[i]();
+		atExitProcedures[i](main_game_thread);
 		SDL_RemoveTimer(timerID);
 	}
 #ifndef WIN32
@@ -278,8 +279,8 @@ int32_t touchpadJoyIdx = -1;
 
 static void initializeSDL2()
 {
-	extern const char binaryGameVersion;
-	printf("%s\n  Wrapper v%s\n  Game    v%s\n", title, WRAPPER_VERSION, &binaryGameVersion);
+	extern const char *binaryGameVersion;
+	printf("%s\n  Wrapper v%s\n  Game    v%s-cpp_r2\n", title, WRAPPER_VERSION, binaryGameVersion);
 	fflush(stdout);
 
 	if (SDL_Init(SDL_INIT_EVERYTHING & ~SDL_INIT_GAMECONTROLLER) < 0)
@@ -625,6 +626,13 @@ REALIGN int32_t SDL_NumJoysticks_wrap(void)
 	return SDL_NumJoysticks() - (touchpadJoyIdx >= 0);
 }
 
+int main(int argc, char *argv[])
+{
+	void nfs2seEntrypoint();
+	nfs2seEntrypoint();
+	return 0;
+}
+
 /* Wrapper for functions called from Assembly code for stack realignment */
 
 #include <stdarg.h>
diff --git a/src/Wrapper.h b/src/Wrapper.h
index 615550e..df815e6 100644
--- a/src/Wrapper.h
+++ b/src/Wrapper.h
@@ -54,7 +54,7 @@
 #define false 0
 #define true 1
 
-typedef uint32_t (STDCALL *WindowProc)(void *hWnd, uint32_t uMsg, uint32_t wParam, uint32_t lParam);
+typedef uint32_t (STDCALL *WindowProc)(void *this, void *hWnd, uint32_t uMsg, uint32_t wParam, uint32_t lParam);
 
 char *convertFilePath(const char *srcPth, BOOL convToLower);
 
